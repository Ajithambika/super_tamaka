{
  "name": "Send Anywhere Android SDK",
  "tagline": "The simplest way to Send files Anywhere",
  "body": "Send Anywhere Android SDK  [![Download](https://api.bintray.com/packages/estmob/maven/sendanywhere/images/download.svg) ](https://bintray.com/estmob/maven/sendanywhere/_latestVersion)\r\n===\r\n\r\n#Setup\r\nSend Anywhere Android SDK is available via both `jcenter()` and `mavenCentral()`.\r\nJust add the following line to your gradle dependency:\r\n```gradle\r\ncompile ('com.estmob.android:sendanywhere:6.6.10@aar') {\r\n\ttransitive = true\r\n}\r\n```\r\n\r\n#Usage\r\nFirst look at the source code of [the provided demo](https://github.com/estmob/SendAnywhere-Android-SDK/blob/master/app/src/main/java/com/estmob/android/sendanywhere/sdk/example/MainActivity.java).\r\n\r\nTask Constructor\r\n---\r\n\r\n```\r\npublic class SendTask extends Task {\r\n    public SendTask(Context context, File[] files);\r\n\r\n    ...\r\n}\r\n\r\npublic class ReceiveTask extends Task {\r\n    public ReceiveTask(Context context, String key, File destDir);\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### SendTask(Context context, File[] files)\r\nParameters |                                      |\r\n-----------| -------------------------------------|\r\ncontext    | The current context.                 |\r\nfiles      | The file list what you want to send. |\r\n\r\n### ReceiveTask(Context context, String key, File destDir)\r\nParameters |                      |\r\n-----------| ---------------------|\r\ncontext    | The current context. |\r\nkey        | The KEY of sender.   |\r\ndestDir    | Save folder.         |\r\n\r\n\r\n\r\nPublic method\r\n---\r\n\r\n```\r\npublic class Task {\r\n    ...\r\n\r\n    public static void init(String key);\r\n\r\n    public void start();\r\n\r\n    public void await();\r\n\r\n    public void cancel();\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### static void init(String key)\r\nSet your API key.\r\n\r\nParameters |               |\r\n-----------| --------------|\r\nkey        | Your API Key. |\r\n\r\n### void start()\r\nStart task for sending or receiving.\r\n\r\n### void await()\r\nWait until task is finished.\r\n\r\n### void cancel()\r\nCancel the task to stop.\r\n\r\n\r\nListener for task\r\n---\r\n```\r\npublic class Task {\r\n    ...\r\n\r\n    public interface OnTaskListener {\r\n        void onNotify(int state, int detailedState, Object obj);\r\n    }\r\n\r\n    public void setOnTaskListener(OnTaskListener callback)\r\n\r\n    ...\r\n}\r\n```\r\n\r\n\r\n```\r\npublic class Task {\r\n    ...\r\n\r\n    public class State {\r\n        public static final int UNKNOWN;\r\n        public static final int FINISHED;\r\n        public static final int ERROR;\r\n        public static final int PREPARING;\r\n        public static final int TRANSFERRING;\r\n    }\r\n\r\n    public class DetailedState {\r\n        public static final int UNKNOWN;\r\n\r\n        public static final int FINISHED_SUCCESS;\r\n        public static final int FINISHED_CANCEL;\r\n        public static final int FINISHED_ERROR;\r\n\r\n        public static final int ERROR_WRONG_API_KEY;\r\n        public static final int ERROR_SERVER;\r\n\r\n        public static final int PREPARING_UPDATED_KEY;\r\n        public static final int PREPARING_UPDATED_FILE_LIST;\r\n\r\n        public static final int TRANSFERRING;\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n```\r\npublic class SendTask extends Task {\r\n    ...\r\n\r\n    public class DetailedState extends Task.DetailedState {\r\n        public static final int ERROR_NO_REQUEST;\r\n        public static final int ERROR_NO_EXIST_FILE;\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n```\r\npublic class ReceiveTask extends Task {\r\n    ...\r\n\r\n    public class DetailedState extends Task.DetailedState {\r\n        public static final int ERROR_NO_EXIST_KEY;\r\n        public static final int ERROR_FILE_NO_DOWNLOAD_PATH;\r\n        public static final int ERROR_FILE_NO_DISK_SPACE;\r\n        public static final int ERROR_FILE_DISK_NOT_MOUNTED;\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### public void setOnTaskListener(OnTaskListener callback)\r\nRegister a callback to be invoked when transfer event occurs.\r\n\r\n### void onNotify(int state, int detailedState, Object obj)\r\n\r\nTask.State   | Task.DetailedState           | param           |\r\n-------------|----------------------------- |-----------------|\r\nFINISHED     | FINISHED_SUCCESS             |                 |\r\n             | FINISHED_CANCEL              |                 |\r\n             | FINISHED_ERROR               |                 |\r\nERROR        | ERROR_WRONG_API_KEY          |                 |\r\n             | ERROR_SERVER                 |                 |\r\n             | ERROR_NO_REQUEST             |                 |\r\n             | ERROR_NO_EXIST_FILE          |                 |\r\n             | ERROR_NO_EXIST_KEY           |                 |\r\n             | ERROR_FILE_NO_DOWNLOAD_PATH  |                 |\r\n             | ERROR_FILE_NO_DISK_SPACE     |                 |\r\n             | ERROR_FILE_DISK_NOT_MOUNTED  |                 |\r\nPREPARING    | PREPARING_UPDATED_KEY        | String          |\r\n             | PREPARING_UPDATED_FILE_LIST  | Task.FileInfo[] |\r\nTRANSFERRING | TRANSFERRING                 | Task.FileInfo   |\r\n\r\n\r\n* Flow Step\r\n  * PREPARING_UPDATED_KEY\r\n    * PREPARING_UPDATED_FILE_LIST\r\n      * TRANSFERRING\r\n      * TRANSFERRING\r\n      * ...\r\n      * TRANSFERRING\r\n      * TRANSFERRING\r\n        * FINISHED_SUCCESS\r\n        * FINISHED_CANCEL\r\n        * ERROR\r\n          * FINISHED_ERROR\r\n\r\nFile Information\r\n---\r\n```\r\npublic class Task {\r\n    ...\r\n\r\n    public class FileInfo {\r\n        public File getFile();\r\n        public String getPathName();\r\n        public long getTransferSize();\r\n        public long getTotalSize();\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### File getFile()\r\nReturn the File object.\r\n\r\n### String getPathName()\r\nReturn the relative path and file name.\r\n\r\n### long getTransferSize()\r\nReturns the transfer size in bytes.\r\n\r\n### long getTotalSize();\r\nReturn the size of the file in bytes.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}