{
  "name": "Send Anywhere Android SDK",
  "tagline": "The simplest way to Send files Anywhere",
  "body": "Send Anywhere Android SDK  [![Download](https://api.bintray.com/packages/estmob/maven/sendanywhere/images/download.svg) ](https://bintray.com/estmob/maven/sendanywhere/_latestVersion)\r\n===\r\n\r\n[Project homepage](http://estmob.github.io/SendAnywhere-Android-SDK/)\r\n\r\n# NOTICE\r\nWe have following important changes on `v6.7.20` and later:\r\n - `SendTask.FileInfo` interface added to support sending non-traditional files.\r\n - `Task.FileInfo` is renamed to `Task.FileState` for avoiding confusion with `SendTask.FileInfo`.\r\n\r\nSee [Releases](https://github.com/estmob/SendAnywhere-Android-SDK/releases) for more details.\r\n\r\n# Prequisites\r\nPlease issue your API key from following link first:\r\nhttps://send-anywhere.com/web/page/api\r\n\r\n# Setup\r\nSend Anywhere Android SDK is available via both `jcenter()` and `mavenCentral()`.\r\nJust add the following line to your gradle dependency:\r\n```gradle\r\ncompile ('com.estmob.android:sendanywhere:6.7.21@aar') {\r\n\ttransitive = true\r\n}\r\n```\r\n\r\n# Troubleshooting\r\nIf you have any problem or questions with Send Anywhere Android SDK, please create new issue(https://github.com/estmob/SendAnywhere-Android-SDK/issues) or contact to our customer center(https://send-anywhere.zendesk.com).\r\n\r\n### Proguard\r\nIf your are using Proguard and it complains during complie, refer [Proguard rules in sample app](https://github.com/estmob/SendAnywhere-Android-SDK/blob/master/app/proguard-rules.pro).\r\n\r\n### Runtime permission error: `java.io.IOException: open failed: EACCES (Permission denied)`\r\nFrom Android Marshmallow(API 23), Android introduced new way to handle application permissions, called \"Runtime Permissions\". This requires developers to request sensitive permissions to users explicitly in application runtime. Send Anywhere SDK requires external storage permissions(`android.permission.WRITE_EXTERNAL_STORAGE`,`\r\nandroid.permission.READ_EXTERNAL_STORAGE`) to work properly, but **does NOT** handle these permissions automatically. Please refer these articles to see more about Runtime Permission Model:\r\n* Requesting Permissions at Run Time (Android Developers) -  https://developer.android.com/training/permissions/requesting.html\r\n* Exploring the new Android Permissions Model (Ribot labs) - https://labs.ribot.co.uk/exploring-the-new-android-permissions-model-ba1d5d6c0610#.95cppknud\r\n\r\n### API key error: `ERROR_WRONG_API_KEY`\r\nYou must call `Task.init(\"YOUR_API_KEY\")` proceeding any transfer operations, e.g. `onCreate` of `Activity`. It is declared as `static`, so you just have to call it once.\r\n\r\nIf this problem persists, please contact us to re-issue your api-key.\r\n\r\n### Conflict with `google-play-services`\r\nSend Anywhere SDK uses `play-services-analytics:9.0.2` internally.\r\nIf this conflicts with your `play-services` dependency, please exclude `play-services` module used in our SDK:\r\n```gradle\r\ncompile ('com.estmob.android:sendanywhere:x.x.x@aar') {\r\n    exclude module: \"play-services-analytics\"\r\n    transitive = true\r\n}\r\n```\r\n\r\n\r\n# Usage\r\nFirst look at the source code of [the provided demo](https://github.com/estmob/SendAnywhere-Android-SDK/blob/master/app/src/main/java/com/estmob/android/sendanywhere/sdk/example/MainActivity.java).\r\n\r\n[Javadoc](http://estmob.github.io/SendAnywhere-Android-SDK/javadoc/6.x/)\r\n\r\nTask Constructors\r\n---\r\n\r\n```java\r\npublic class SendTask extends Task {\r\n    public SendTask(Context context, File[] files);\r\n\r\n    public SendTask(Context context, List<? extends FileInfo> files);\r\n\r\n\tpublic interface FileInfo {\r\n        @NonNull Uri getUri();\r\n        @NonNull String getFileName();\r\n        long getLength();\r\n        long getLastModified();\r\n    }\r\n    ...\r\n}\r\n\r\npublic class ReceiveTask extends Task {\r\n    public ReceiveTask(Context context, String key, File destDir);\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### SendTask(Context context, File[] files)\r\nParameters |                                      |\r\n-----------| -------------------------------------|\r\ncontext    | The current context.                 |\r\nfiles      | The file list what you want to send. |\r\n\r\n### SendTask(Context context, List<? extends FileInfo> files)\r\nParameters |                                      \t\t\t\t\t\t\t   |\r\n-----------| ------------------------------------------------------------------|\r\ncontext    | The current context.                 \t\t\t\t\t\t\t   |\r\nfiles      | The file list with your own implementation of `SendTask.FileInfo` |\r\n\r\nYou can provide your own implementation of `SendTask.FileInfo` for non-traditional files that cannot be represented as `Java.io.File`, such as files starting with `content://..`\r\n\r\nSee [SimpleFileInfo in sample](https://github.com/estmob/SendAnywhere-Android-SDK/blob/master/app/src/main/java/com/estmob/android/sendanywhere/sdk/example/SimpleFileInfo.java) for the example implementaion.\r\n\r\n#### SendTask.FileInfo interface\r\nMethods         | Return type\t|                                   |\r\n--------------- | ------------- |---------------------------------- |\r\ngetUri          | Uri           | The Uri of sending file.          |\r\ngetFileName     | String        | The file name for recevier.       |\r\ngetLength       | long          | The length of sending file.       |\r\ngetLastModified | long          | The last modified time in seconds |\r\n\r\n### ReceiveTask(Context context, String key, File destDir)\r\nParameters |                           |\r\n---------- | --------------------------|\r\ncontext    | The current context.      |\r\nkey        | The KEY of sender.        |\r\ndestDir    | The folder to save files. |\r\n\r\n\r\nPublic methods\r\n---\r\n\r\n```java\r\npublic class Task {\r\n    ...\r\n\r\n    public static void init(String key);\r\n\r\n    public static void setProfileName(String name);\r\n\r\n    public void start();\r\n\r\n    public void await();\r\n\r\n    public void cancel();\r\n\r\n    public Object getValue();\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### public static void init(String key)\r\nSet your API key.\r\n\r\nParameters |               |\r\n-----------| --------------|\r\nkey        | Your API Key. |\r\n\r\n### public static void setProfileName(String name)\r\nSet profile name of the device\r\n\r\nParameters |                     |\r\n-----------| --------------------|\r\nname       | Desired device name |\r\n\r\n### public void start()\r\nStart task for sending or receiving.\r\n\r\n### public void await()\r\nWait until task is finished.\r\n\r\n### public void cancel()\r\nCancel the task to stop.\r\n\r\n### public Object getValue(int key)\r\nFetch additional information of `Task`. You should cast return `Object` to vaild types for each cases.\r\n\r\n```java\r\npublic static class Value {\r\n    public static final int KEY;\r\n    public static final int EXPIRES_TIME;\r\n}\r\n```\r\n\r\nTask.Value (key)| Task.DetailedState (available on)  | Type                                  |\r\n----------------|------------------------------------|---------------------------------------|\r\nKEY             | PREPARING_UPDATED_KEY              | String                                |\r\nEXPIRES_TIME    | PREPARING_UPDATED_KEY              | long (UNIX Epoch time **in seconds**) |\r\n\r\n\r\nListeners for `Task`\r\n---\r\n```java\r\npublic class Task {\r\n    ...\r\n\r\n    public interface OnTaskListener {\r\n        void onNotify(int state, int detailedState, Object obj);\r\n    }\r\n\r\n    public void setOnTaskListener(OnTaskListener callback)\r\n\r\n    ...\r\n}\r\n```\r\n\r\n\r\n```java\r\npublic class Task {\r\n    public static class State {\r\n        public static final int UNKNOWN;\r\n        public static final int FINISHED;\r\n        public static final int ERROR;\r\n        public static final int PREPARING;\r\n        public static final int TRANSFERRING;\r\n    }\r\n\r\n    public static class DetailedState {\r\n        public static final int UNKNOWN;\r\n\r\n        public static final int FINISHED_SUCCESS;\r\n        public static final int FINISHED_CANCEL;\r\n        public static final int FINISHED_ERROR;\r\n\r\n        public static final int ERROR_WRONG_API_KEY;\r\n        public static final int ERROR_SERVER;\r\n\r\n        public static final int PREPARING_UPDATED_KEY;\r\n        public static final int PREPARING_UPDATED_FILE_LIST;\r\n\r\n        public static final int TRANSFERRING;\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n```java\r\npublic class SendTask extends Task {\r\n    public static class DetailedState extends Task.DetailedState {\r\n        public static final int ERROR_NO_REQUEST;\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n```java\r\npublic class ReceiveTask extends Task {\r\n    public static class DetailedState extends Task.DetailedState {\r\n        public static final int ERROR_NO_EXIST_KEY;\r\n        public static final int ERROR_FILE_NO_DOWNLOAD_PATH;\r\n        public static final int ERROR_FILE_NO_DISK_SPACE;\r\n        public static final int ERROR_FILE_DISK_NOT_MOUNTED;\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### public void setOnTaskListener(OnTaskListener callback)\r\nRegister a callback to be invoked when transfer event occurs.\r\n\r\n### void onNotify(int state, int detailedState, Object obj)\r\n\r\nTask.State   | Task.DetailedState           | param           |\r\n-------------|----------------------------- |-----------------|\r\nFINISHED     | FINISHED_SUCCESS             |                 |\r\n             | FINISHED_CANCEL              |                 |\r\n             | FINISHED_ERROR               |                 |\r\nERROR        | ERROR_WRONG_API_KEY          |                 |\r\n             | ERROR_SERVER                 |                 |\r\n             | ERROR_NO_REQUEST             |                 |\r\n             | ERROR_NO_EXIST_KEY           |                 |\r\n             | ERROR_FILE_NO_DOWNLOAD_PATH  |                 |\r\n             | ERROR_FILE_NO_DISK_SPACE     |                 |\r\n             | ERROR_FILE_DISK_NOT_MOUNTED  |                 |\r\nPREPARING    | PREPARING_UPDATED_KEY        | String          |\r\n             | PREPARING_UPDATED_FILE_LIST  | Task.FileInfo[] |\r\nTRANSFERRING | TRANSFERRING                 | Task.FileInfo   |\r\n\r\n\r\nFlow Step\r\n * PREPARING_UPDATED_KEY\r\n   * PREPARING_UPDATED_FILE_LIST\r\n     * TRANSFERRING\r\n     * TRANSFERRING\r\n     * ...\r\n     * TRANSFERRING\r\n     * TRANSFERRING\r\n       * FINISHED_SUCCESS\r\n       * FINISHED_CANCEL\r\n       * ERROR\r\n         * FINISHED_ERROR\r\n\r\nFileState (File Transfer State Information)\r\n---\r\n```java\r\npublic class Task {\r\n    ...\r\n\r\n    public static class FileSate {\r\n        public File getFile();\r\n        public String getPathName();\r\n        public long getTransferSize();\r\n        public long getTotalSize();\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n### File getFile()\r\nReturn the File object.\r\n\r\n### String getPathName()\r\nReturn the relative path and file name.\r\n\r\n### long getTransferSize()\r\nReturns the transfer size in bytes.\r\n\r\n### long getTotalSize();\r\nReturn the size of the file in bytes.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}